AWSTemplateFormatVersion: '2010-09-09'
Description: Amazon Cloudwatch Synthetics Canary template
Parameters:
  CanaryName:
    Type: String
    Description: Name of the Canary.
  HandlerName:
    Type: String
    Description: Handler for the Canary script.
    Default: "test.handler"
  ExecutionRole:
    Type: String
    Description: The IAM role for canary execution
  S3Bucket:
    Type: String
    Description: S3 for canary scripts and results
  S3ScriptKey:
    Type: String
    Description: Location of the canary script
    Default: canary/scripts/canary-sample.js.zip
  ArtifactLocation:
    Type: String
    Description: Location for the canary artifacts
    Default: s3://cw-syn-results-123456789-us-west-2/canary/us-west-2/test-canary/
  KmsKeyArn:
    Type: String
    Description: KMS key to be used by canary artifacts
  SecurityGroupIds:
    Type: String
    Description: Security Group Ids for lambda
  VPCId:
    Type: String
    Description: VPC where lambda will be created
  CanaryFailureAlarmName:
    Type: String
    Description: Name of the CW Alarm for Success Percent.
    Default: "Synthetics-Alarm-test-canary-3-failure"
  CanaryDurationAlarmName:
    Type: String
    Description: Name of the CW Alarm for Duration.
    Default: "Synthetics-Alarm-test-canary-3-duration"
  SNSARN:
    Type: String
    Description: ARN of the SNS for sending notifications
    Default: "arn:aws:sns:us-west-2:123456789:TestSNS"
Resources:
  SyntheticsCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: !Ref CanaryName
      Code:
        Handler: !Ref HandlerName
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3ScriptKey
      ExecutionRoleArn: !Sub ${ExecutionRole}
      ArtifactS3Location: !Ref ArtifactLocation
      ArtifactConfig:
        S3Encryption:
          EncryptionMode: SSE_KMS
          KmsKeyArn: !Sub ${KmsKeyArn}
      VPCConfig:
        SubnetIds:
          Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub ${VPCId}:private-subnet:ids
        SecurityGroupIds: !Split [ "," , !Ref SecurityGroupIds ]
      RuntimeVersion: "syn-nodejs-puppeteer-3.5"
      Schedule: {Expression: 'cron(15 */1 * * ? *)'}
      RunConfig: {TimeoutInSeconds: 60}
      FailureRetentionPeriod: 31
      SuccessRetentionPeriod: 31
      StartCanaryAfterCreation: true

  CanarySuccessLowCWAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Ref CanaryFailureAlarmName
      AlarmDescription: The CloudWatch Synthetics Canary that monitors the Application
      AlarmActions:
        - !Ref SNSARN
      Namespace: CloudWatchSynthetics
      MetricName: SuccessPercent
      Dimensions:
        - Name: CanaryName
          Value: !Ref CanaryName
      Statistic: Sum
      ComparisonOperator: LessThanThreshold
      Threshold: 100
      Period: 3600 # 1 hour
      EvaluationPeriods: 1 # Alarm if the canary is failing for 5 minutes
      TreatMissingData: breaching # Catch if the canary is not running

  CanaryDurationCWAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Ref CanaryDurationAlarmName
      AlarmDescription: The CloudWatch Synthetics Canary that monitors the Application
      AlarmActions:
        - !Ref SNSARN
      Namespace: CloudWatchSynthetics
      MetricName: Duration
      Dimensions:
        - Name: CanaryName
          Value: !Ref CanaryName
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 300000 # 5-min
      Period: 3600 # 1 hour
      EvaluationPeriods: 1 # Alarm if the canary is not running/failing for 1 hour
      TreatMissingData: breaching # Catch if the canary is not running

Outputs:
  CanaryId:
    Description: Id of the Canary
    Value: !GetAtt SyntheticsCanary.Id
    Export:
      Name: !Sub ${ExportName}
